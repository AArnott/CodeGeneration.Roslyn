trigger:
  branches:
    include: ["master"]
  paths:
    exclude: ["doc", "*.md", ".appveyor.yml", ".travis.yml"]

variables:
#  TreatWarningsAsErrors: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  BuildConfiguration: Release
  BuildPlatform: Any CPU

resources:
  containers:
  - container: xenial
    image: andrewarnott/linux-buildagent

jobs:
- job: Windows
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: UseDotNet@2
    displayName: Install .NET Core runtime v2.1
    inputs:
      packageType: runtime
      version: '2.1.x'

  - task: UseDotNet@2
    displayName: Install/select .NET Core SDK
    inputs:
      useGlobalJson: true
      workingDirectory: src

  - script: |
      dotnet tool install --tool-path . nbgv --version 3.0.28
      .\nbgv cloud -p src
    displayName: Set build number
    condition: ne(variables['system.pullrequest.isfork'], true)

  - script: dotnet --info
    displayName: Show dotnet SDK info

  - task: DotNetCoreCLI@2
    displayName: Restore NuGet packages
    inputs:
      command: custom
      custom: restore
      projects: src/**/*.sln

  - task: DotNetCoreCLI@2
    displayName: Build solutions
    inputs:
      command: custom
      custom: build
      projects: src/**/*.sln
      arguments: -t:build,pack --no-restore -m -c $(BuildConfiguration) -bl:"$(Build.ArtifactStagingDirectory)/build_logs/msbuild.binlog"

  - task: DotNetCoreCLI@2
    displayName: Run tests
    inputs:
      command: test
      workingDirectory: src
      arguments: -v n --no-build -c $(BuildConfiguration)

  - task: CopyFiles@1
    displayName: Collecting project.assets.json artifacts
    inputs:
      Contents: |
        obj/**/project.assets.json
      TargetFolder: $(Build.ArtifactStagingDirectory)/projectAssetsJson
    condition: succeededOrFailed()

  - task: CopyFiles@1
    displayName: Collecting deployables
    inputs:
      Contents: |
        bin/**/$(BuildConfiguration)/**/*.nupkg
      TargetFolder: $(Build.ArtifactStagingDirectory)/deployables
      flattenFolders: true

  - task: PublishBuildArtifacts@1
    displayName: Publish projectAssetsJson artifacts
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/projectAssetsJson
      ArtifactName: projectAssetsJson
      ArtifactType: Container
    condition: and(succeededOrFailed(), ne(variables['system.pullrequest.isfork'], true))

  - task: PublishBuildArtifacts@1
    displayName: Publish build_logs artifacts
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/build_logs
      ArtifactName: build_logs
      ArtifactType: Container
    condition: and(succeededOrFailed(), ne(variables['system.pullrequest.isfork'], true))

  ## The rest of these steps are for deployment and skipped for PR builds

  #- task: PublishBuildArtifacts@1
  #  inputs:
  #    PathtoPublish: $(build.sourcesdirectory)/bin
  #    ArtifactName: bin
  #    ArtifactType: Container
  #  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['system.pullrequest.isfork'], true))

  - task: PublishBuildArtifacts@1
    displayName: Publish deployables artifacts
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/deployables
      ArtifactName: deployables
      ArtifactType: Container
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['system.pullrequest.isfork'], true))

- job: Linux
  pool:
    vmImage: Ubuntu 16.04
  container: xenial
  variables:
    GitLinkEnabled: false
  steps:
  - template: azure-pipelines/testfx.yml
    parameters:
      projectdirectory: src/CodeGeneration.Roslyn.Tests

- job: macOS
  pool:
    vmImage: macOS 10.13
  variables:
    GitLinkEnabled: false
  steps:
  - template: azure-pipelines/testfx.yml
    parameters:
      projectdirectory: src/CodeGeneration.Roslyn.Tests
