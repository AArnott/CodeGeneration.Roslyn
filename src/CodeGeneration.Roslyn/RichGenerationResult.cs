// Copyright (c) Andrew Arnott. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.

namespace CodeGeneration.Roslyn
{
    using System.Diagnostics;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp.Syntax;

    /// <summary>
    /// Contains <see cref="CompilationUnitSyntax"/> additions generated by the <see cref="IRichCodeGenerator"/>.
    /// </summary>
    public struct RichGenerationResult
    {
        /// <summary>
        /// Creates <see cref="RichGenerationResult"/> with provided arguments as property values.
        /// </summary>
        /// <param name="members">Assigned to <see cref="Members"/>.</param>
        /// <param name="usings">Assigned to <see cref="Usings"/>.</param>
        /// <param name="attributeLists">Assigned to <see cref="AttributeLists"/>.</param>
        /// <param name="externs">Assigned to <see cref="Externs"/>.</param>
        [DebuggerStepThrough]
        public RichGenerationResult(
            SyntaxList<MemberDeclarationSyntax> members,
            SyntaxList<UsingDirectiveSyntax> usings = default,
            SyntaxList<AttributeListSyntax> attributeLists = default,
            SyntaxList<ExternAliasDirectiveSyntax> externs = default)
        {
            Members = members;
            Usings = usings;
            AttributeLists = attributeLists;
            Externs = externs;
        }

        /// <summary>
        /// Gets <see cref="MemberDeclarationSyntax"/> to add to generated <see cref="CompilationUnitSyntax"/>.
        /// </summary>
        public SyntaxList<MemberDeclarationSyntax> Members { get; }

        /// <summary>
        /// Gets <see cref="UsingDirectiveSyntax"/> to add to generated <see cref="CompilationUnitSyntax"/>.
        /// </summary>
        public SyntaxList<UsingDirectiveSyntax> Usings { get; }

        /// <summary>
        /// Gets <see cref="ExternAliasDirectiveSyntax"/> to add to generated <see cref="CompilationUnitSyntax"/>.
        /// </summary>
        public SyntaxList<ExternAliasDirectiveSyntax> Externs { get; }

        /// <summary>
        /// Gets <see cref="AttributeListSyntax"/> to add to generated <see cref="CompilationUnitSyntax"/>.
        /// </summary>
        public SyntaxList<AttributeListSyntax> AttributeLists { get; }
        
        [DebuggerHidden, DebuggerStepThrough]
        public void Deconstruct(out SyntaxList<MemberDeclarationSyntax> members,
            out SyntaxList<UsingDirectiveSyntax> usings,
            out SyntaxList<AttributeListSyntax> attributeLists,
            out SyntaxList<ExternAliasDirectiveSyntax> externs)
        {
            members = Members;
            usings = Usings;
            attributeLists = AttributeLists;
            externs = Externs;
        }
    }
}
